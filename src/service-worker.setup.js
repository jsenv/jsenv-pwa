/* globals self */

self.config = {}

/*
 * cachePrefix is used to generate a unique cache name in the navigator such as:
 * "jsenvjld2cjxh0000qzrmn831i7rn"
 * The prefix is used to identify which cache have been created by this service worker
 * so that the next service worker can cleanup cache.
 */
self.config.cachePrefix = `jsenv`

/*
 * When installed, service worker will try to put a list of urls into browser cache.
 * This is done by "install" function in service-worker.main.js.
 * Urls will be cached as long as service worker is alive.
 *
 * The list of urls to cache on install is the composition of:
 * - self.generatedUrlsConfig
 * - self.config.manualUrlsConfig
 *
 * self.generatedUrlsConfig is meant to be generated by an automated process.
 * During the build "@jsenv/core" injects self.generatedUrlsConfig into the service
 * worker file.
 *
 * self.config.manualUrlsConfig is where you can add url not handled by jsenv during build.
 */
self.generatedUrlsConfig = self.generatedUrlsConfig || {}
self.config.manualUrlsConfig = {
  "/": {},
}

/*
 * Decides if the request will be handled by the service worker or not.
 * When returning true, the response for that request will come from cache. If not cached
 * response is fetched from network and put into cache.
 * When returning false, the default navigator behaviour applies, as if there was no service worker.
 *
 * The implementation below means only GET or HEAD requests cached during install
 * are handled by the service worker.
 */
self.config.shouldHandleRequest = (request, { requestWasCachedOnInstall }) => {
  if (request.method !== "GET" && request.method !== "HEAD") return false
  return requestWasCachedOnInstall
}

/*
 * Whenever you change something in this file, such as config.cachePrefix
 * or config.manualUrlsConfig, browser reinstalls the service worker.
 * When service worker activates, it is responsible to clean the cache
 * used by the previous service worker version.
 *
 * This logic must be implemented using config.shouldCleanOnActivate
 * function below.
 *
 * shouldCleanOnActivate(response, request)
 *
 * It is a function that will be used to decide if a cached response must be deleted
 * when service worker activates.
 *
 * The implementation below tells to delete cache for any request not cached during install.
 * It means that every request where "shouldHandleRequest" returned true
 * in the previous worker but false in the new worker, that request cached is deleted.
 */
self.config.shouldCleanOnActivate = (response, request, { requestWasCachedOnInstall }) =>
  !requestWasCachedOnInstall

/**
 * logLevel can be "debug", "info", "warn", "error"
 */
self.config.logLevel = "warn"
self.config.logsBackgroundColor = "#ffdc00" // nice yellow

/**
 * navigationPreloadEnabled is experimental
 */
self.config.navigationPreloadEnabled = false

/**
 * actions can be used to create code that can be executed in the service worker
 * when parent page ask him to do so. It's for super advanced use cases.
 */
self.config.actions = {
  ping: () => "pong",
}
